
id: gcp_project_flow_with_csv
namespace: CattleExploration
description: |
  The CSV Data used in the course: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:

  - id: year
    type: SELECT
    displayName: Select year
    values: [ "2018","2019", "2020" ]
    defaults: "2018"
    allowCustomValue: true # allows you to type 2021 from the UI for the homework ðŸ¤—

variables:
  file: "{{trigger.date | date('MM')}}.csv"
  table: "{{kv('GCP_DATASET')}}.{{trigger.date | date('yyyy-MM')}}"
  data: "{{outputs.extract.outputFiles['inp' ~ '_tripdata_' ~ 'inputs.year' ~ '-'  ~ '.csv']}}"

tasks:
  - id: PythonLooper
    type: io.kestra.plugin.scripts.python.Script
    env:
      TRIGGER_DATE: "{{ trigger.date | date('MM') }}"
      TRIGGER_YEAR: "{{ trigger.date | date('yyyy') }}"
    script: "import os\r

      from kestra import Kestra\r

      holder = [{'key':'01','name':'jan'},\r

      {'key':'02','name':'feb'},\r

      {'key':'03','name':'mar'},\r

      {'key':'04','name':'apr'},\r

      {'key':'05','name':'may'},\r

      {'key':'06','name':'jun'},\r

      {'key':'07','name':'jul'},\r

      {'key':'08','name':'aug'},\r

      {'key':'09','name':'sep'},\r

      {'key':'10','name':'oct'},\r

      {'key':'11','name':'nov'},\r

      {'key':'12','name':'dec'}]\r

      \r

      trigger_month = os.getenv(\"TRIGGER_DATE\")\r

      trigger_year = os.getenv(\"TRIGGER_YEAR\") \r

      \r

      for ind,el in enumerate(holder):\r

      \    if trigger_month == el['key']:\r

      \         currentVal = {\"firstMonth\":holder[ind]['name'],\"lastMonth\":holder[ind+2]['name'],\"year\":trigger_year[2:]}\r

      \         print(currentVal)\r

      \         Kestra.outputs(currentVal)"

  - id: checkTester
    type: io.kestra.plugin.core.log.Log
    message: "{{outputs.PythonLooper.vars}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO outside-{{outputs.PythonLooper.vars.firstMonth}}-{{outputs.PythonLooper.vars.lastMonth}}-{{outputs.PythonLooper.vars.year}}.csv  https://fsadata.github.io/cattle-conditions/data/cattle-conditions-{{outputs.PythonLooper.vars.firstMonth}}-{{outputs.PythonLooper.vars.year}}-{{outputs.PythonLooper.vars.lastMonth}}-{{outputs.PythonLooper.vars.year}}.csv
  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from:  "{{ outputs.extract.outputFiles['outside-' ~ outputs.PythonLooper.vars.firstMonth ~ '-' ~ outputs.PythonLooper.vars.lastMonth ~ '-' ~ outputs.PythonLooper.vars.year ~ '.csv'] }}"
    to: gs://{{kv('GCP_BUCKET_NAME')}}/outside-{{outputs.PythonLooper.vars.firstMonth}}-{{outputs.PythonLooper.vars.lastMonth}}-{{outputs.PythonLooper.vars.year}}.csv

  - id: bq_animal_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.cattle_condition`
      (
          unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
          filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
          Species STRING OPTIONS (description = 'Animal Specie.'),
          InspectionType STRING OPTIONS (description = 'Type of inspection carried out'),
          Condition STRING OPTIONS (description = 'condition surrounding the death of said animal'),
          YearMonth TIMESTAMP  OPTIONS (description = 'Year and Month of incidence'),
          Country STRING OPTIONS (description = 'Country it occured.'),
          NumberOfConditions INT64 OPTIONS (description = 'How frequent it happened'),
          Throughput INT64 OPTIONS (description = ''),
          NumberOfThroughputPlants INT64 OPTIONS (description = 'Number of throughputs'),
          PercentageOfThroughput FLOAT64 OPTIONS (description = 'Percentage of throughputs')
      )
      PARTITION BY DATE(YearMonth);

  - id: bq_animal_data_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
      (
          Species STRING OPTIONS (description = 'Animal Specie.'),
          InspectionType STRING OPTIONS (description = 'Type of inspection carried out'),
          Condition STRING OPTIONS (description = 'condition surrounding the death of said animal'),
          YearMonth STRING OPTIONS (description = 'Year and Month of incidence'),
          Country STRING OPTIONS (description = 'Country it occured.'),
          NumberOfConditions INT64 OPTIONS (description = 'How frequent it happened'),
          Throughput INT64 OPTIONS (description = ''),
          NumberOfThroughputPlants INT64 OPTIONS (description = 'Number of throughputs'),
          PercentageOfThroughput FLOAT64 OPTIONS (description = 'Percentage of throughputs')
      )
      OPTIONS (
          format = 'CSV',
          uris = ["gs://{{kv('GCP_BUCKET_NAME')}}/outside-{{outputs.PythonLooper.vars.firstMonth}}-{{outputs.PythonLooper.vars.lastMonth}}-{{outputs.PythonLooper.vars.year}}.csv"],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
      );

  - id: bq_animal_cleaned_data
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_cleaned`
       AS
       SELECT
         Species,
         InspectionType,
         Condition,
         PARSE_TIMESTAMP('%Y-%m', YearMonth) AS YearMonth, -- Convert YearMonth to proper datetime format
         Country,
         NumberOfConditions,
         Throughput,
         NumberOfThroughputPlants,
         PercentageOfThroughput,
         MD5(CONCAT(
           COALESCE(CAST(Country AS STRING), ""),
           COALESCE(CAST(Species AS STRING), ""),
           COALESCE(CAST(YearMonth AS STRING), "")
         )) AS unique_row_id,
         "outside-{{outputs.PythonLooper.vars.firstMonth}}-{{outputs.PythonLooper.vars.lastMonth}}-{{outputs.PythonLooper.vars.year}}.csv" AS filename,
         FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_row_merger
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.cattle_condition` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_cleaned` S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (unique_row_id, filename, Species, InspectionType, Condition, YearMonth, Country, NumberOfConditions, Throughput, NumberOfThroughputPlants, PercentageOfThroughput)
        VALUES (S.unique_row_id, S.filename, S.Species, S.InspectionType, S.Condition, S.YearMonth, S.Country, S.Throughput, S.NumberOfThroughputPlants, S.NumberOfConditions, S.PercentageOfThroughput);

  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"

  - id: extractMonth
    type: io.kestra.plugin.core.log.Log
    message: "{{render(vars.file)}}"

triggers:
  - id: Scheduler
    type: io.kestra.plugin.core.trigger.Schedule
    cron: 0 9 1 */3 *

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"
